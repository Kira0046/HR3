//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/gameScenes/Input Action/Note Control/notesControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NotesControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NotesControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""notesControl"",
    ""maps"": [
        {
            ""name"": ""notes"",
            ""id"": ""eaec752c-4463-46ca-a8e0-f4ee32cd4cb9"",
            ""actions"": [
                {
                    ""name"": ""left notes"",
                    ""type"": ""Button"",
                    ""id"": ""52fceb2b-0799-4663-bb2f-633267068a41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""down notes"",
                    ""type"": ""Button"",
                    ""id"": ""4e64038a-65a7-407d-b449-3e4eff0fb50f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""up notes"",
                    ""type"": ""Button"",
                    ""id"": ""047bf6b7-cf2f-48ae-ad2c-93d60415cb7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""right notes"",
                    ""type"": ""Button"",
                    ""id"": ""0266e03c-8a7d-4da5-a170-c23ebd79d746"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5236fa85-56ee-4d61-89cf-b416ffa727c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""left notes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b51e8fc-e720-442a-be93-20958a8cca35"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""down notes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22bef532-5332-47dc-9665-954d522e2a0e"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""up notes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5049aa83-4df0-4ca9-97ad-e356586b000c"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""right notes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // notes
        m_notes = asset.FindActionMap("notes", throwIfNotFound: true);
        m_notes_leftnotes = m_notes.FindAction("left notes", throwIfNotFound: true);
        m_notes_downnotes = m_notes.FindAction("down notes", throwIfNotFound: true);
        m_notes_upnotes = m_notes.FindAction("up notes", throwIfNotFound: true);
        m_notes_rightnotes = m_notes.FindAction("right notes", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // notes
    private readonly InputActionMap m_notes;
    private List<INotesActions> m_NotesActionsCallbackInterfaces = new List<INotesActions>();
    private readonly InputAction m_notes_leftnotes;
    private readonly InputAction m_notes_downnotes;
    private readonly InputAction m_notes_upnotes;
    private readonly InputAction m_notes_rightnotes;
    public struct NotesActions
    {
        private @NotesControl m_Wrapper;
        public NotesActions(@NotesControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @leftnotes => m_Wrapper.m_notes_leftnotes;
        public InputAction @downnotes => m_Wrapper.m_notes_downnotes;
        public InputAction @upnotes => m_Wrapper.m_notes_upnotes;
        public InputAction @rightnotes => m_Wrapper.m_notes_rightnotes;
        public InputActionMap Get() { return m_Wrapper.m_notes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotesActions set) { return set.Get(); }
        public void AddCallbacks(INotesActions instance)
        {
            if (instance == null || m_Wrapper.m_NotesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NotesActionsCallbackInterfaces.Add(instance);
            @leftnotes.started += instance.OnLeftnotes;
            @leftnotes.performed += instance.OnLeftnotes;
            @leftnotes.canceled += instance.OnLeftnotes;
            @downnotes.started += instance.OnDownnotes;
            @downnotes.performed += instance.OnDownnotes;
            @downnotes.canceled += instance.OnDownnotes;
            @upnotes.started += instance.OnUpnotes;
            @upnotes.performed += instance.OnUpnotes;
            @upnotes.canceled += instance.OnUpnotes;
            @rightnotes.started += instance.OnRightnotes;
            @rightnotes.performed += instance.OnRightnotes;
            @rightnotes.canceled += instance.OnRightnotes;
        }

        private void UnregisterCallbacks(INotesActions instance)
        {
            @leftnotes.started -= instance.OnLeftnotes;
            @leftnotes.performed -= instance.OnLeftnotes;
            @leftnotes.canceled -= instance.OnLeftnotes;
            @downnotes.started -= instance.OnDownnotes;
            @downnotes.performed -= instance.OnDownnotes;
            @downnotes.canceled -= instance.OnDownnotes;
            @upnotes.started -= instance.OnUpnotes;
            @upnotes.performed -= instance.OnUpnotes;
            @upnotes.canceled -= instance.OnUpnotes;
            @rightnotes.started -= instance.OnRightnotes;
            @rightnotes.performed -= instance.OnRightnotes;
            @rightnotes.canceled -= instance.OnRightnotes;
        }

        public void RemoveCallbacks(INotesActions instance)
        {
            if (m_Wrapper.m_NotesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INotesActions instance)
        {
            foreach (var item in m_Wrapper.m_NotesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NotesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NotesActions @notes => new NotesActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface INotesActions
    {
        void OnLeftnotes(InputAction.CallbackContext context);
        void OnDownnotes(InputAction.CallbackContext context);
        void OnUpnotes(InputAction.CallbackContext context);
        void OnRightnotes(InputAction.CallbackContext context);
    }
}
